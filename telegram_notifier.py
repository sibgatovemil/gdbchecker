"""Telegram notification service"""

import os
import logging
from telegram import Bot
from telegram.error import TelegramError
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TelegramNotifier:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.bot = None

        if self.bot_token and self.chat_id:
            try:
                self.bot = Bot(token=self.bot_token)
                logger.info("Telegram bot initialized successfully")
            except Exception as e:
                logger.error(f"Failed to initialize Telegram bot: {str(e)}")
        else:
            logger.warning("Telegram credentials not configured")

    def send_message(self, message):
        """Send message to Telegram channel"""
        if not self.bot or not self.chat_id:
            logger.warning("Telegram not configured, skipping notification")
            return False

        try:
            self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'
            )
            logger.info("Telegram notification sent successfully")
            return True

        except TelegramError as e:
            logger.error(f"Telegram error: {str(e)}")
            return False

        except Exception as e:
            logger.error(f"Unexpected error sending Telegram message: {str(e)}")
            return False

    def send_ban_notification(self, domain):
        """Send notification when domain gets banned"""
        message = f"""üö® <b>–î–û–ú–ï–ù –ó–ê–ë–ê–ù–ï–ù</b>

<b>–î–æ–º–µ–Ω:</b> {domain.domain}
<b>–ü—Ä–æ–µ–∫—Ç:</b> {domain.project or '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {domain.purpose or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC

‚ö†Ô∏è Google Safe Browsing –æ–±–Ω–∞—Ä—É–∂–∏–ª —É–≥—Ä–æ–∑—É –Ω–∞ —ç—Ç–æ–º –¥–æ–º–µ–Ω–µ."""

        return self.send_message(message)

    def send_unban_notification(self, domain):
        """Send notification when domain gets unbanned"""
        message = f"""‚úÖ <b>–î–û–ú–ï–ù –†–ê–ó–ë–ê–ù–ï–ù</b>

<b>–î–æ–º–µ–Ω:</b> {domain.domain}
<b>–ü—Ä–æ–µ–∫—Ç:</b> {domain.project or '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {domain.purpose or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC

‚ú® –î–æ–º–µ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ Google."""

        return self.send_message(message)

    def send_test_message(self):
        """Send test message to verify configuration"""
        message = """üîî <b>GDBChecker - –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É!
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–∞—Ö –¥–æ–º–µ–Ω–æ–≤ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞."""

        return self.send_message(message)


if __name__ == '__main__':
    # Test notification
    notifier = TelegramNotifier()
    if notifier.send_test_message():
        print("Test notification sent successfully!")
    else:
        print("Failed to send test notification. Check your configuration.")
